package cnk.air_commercialscalculationengine;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class FlightDetails implements java.io.Serializable
{

   private java.util.Date flightTiming;

  public boolean CheckRange(String configuredInput, int checkingValue)
  {

      String[] configuredInputList = configuredInput.split(";");
      if (configuredInputList[0].equals("LESSTHANEQUALTO"))
      {

         return LESSTHANEQUALTO(Integer.parseInt(configuredInputList[1]), checkingValue);
      }
      else if (configuredInputList[0].equals("GREATERTHANEQUALTO"))
      {

         return GREATERTHANEQUALTO(Integer.parseInt(configuredInputList[1]), checkingValue);
      }
      else if (configuredInputList[0].equals("BETWEEN"))
      {

         return BETWEEN(Integer.parseInt(configuredInputList[1]), Integer.parseInt(configuredInputList[2]), checkingValue);
      }
      else if (configuredInputList[0].equals("EQUALTO"))
      {

         return EQUAL(Integer.parseInt(configuredInputList[1]), checkingValue);
      }
      else if (configuredInputList[0].equals("IN"))
      {

         return IN(configuredInputList[1], checkingValue);
      }

      return false;

  }

  public boolean LESSTHANEQUALTO(int configuredInput, int checkingValue)
  {

      if (checkingValue <= configuredInput)
         return true;

      return false;
  }

  public boolean GREATERTHANEQUALTO(int configuredInput, int checkingValue)
  {

      if (checkingValue >= configuredInput)
         return true;

      return false;
  }

  public boolean BETWEEN(int lowerLimit, int upperLimit, int checkingValue)
  {

      if (GREATERTHANEQUALTO(lowerLimit, checkingValue) && LESSTHANEQUALTO(upperLimit, checkingValue))
         return true;

      return false;
  }

  public boolean EQUAL(int configuredInput, int checkingValue)
  {

      if (checkingValue == configuredInput)
         return true;

      return false;
  }

  public boolean IN(String configuredInput, int checkingValue)
  {

      String[] configuredInputList = configuredInput.split("/");
      for (String tempConfiguredInput : configuredInputList)
      {

         if (EQUAL(Integer.parseInt(tempConfiguredInput), checkingValue))
            return true;
      }

      return false;
  }


  public static boolean checkFlightTime(String configuredInput, Date conditionValue)
  {

      try
      {
         String[] configuredInputList = configuredInput.split(";");
         DateFormat format = new SimpleDateFormat("HH:mm:ss");
         conditionValue = format.parse(format.format(conditionValue));

         if (configuredInputList[0].equals("LESSTHANEQUALTO"))
         {

            Date date = format.parse(configuredInputList[1]);
            return (date.after(conditionValue) || date.equals(conditionValue));

         }
         else if (configuredInputList[0].equals("GREATERTHANEQUALTO"))
         {

            Date date = format.parse(configuredInputList[1]);
            return (date.before(conditionValue) || date.equals(conditionValue));

         }
         else if (configuredInputList[0].equals("BETWEEN"))
         {

            Date lowerLimit = format.parse(configuredInputList[1]);
            Date upperLimit = format.parse(configuredInputList[2]);
            return ((lowerLimit.before(conditionValue) || lowerLimit.equals(conditionValue)) && (upperLimit.after(conditionValue) || upperLimit.equals(conditionValue)));

         }
         else if (configuredInputList[0].equals("EQUALTO"))
         {

            Date date = format.parse(configuredInputList[1]);
            return date.equals(conditionValue);

         }
         else if (configuredInputList[0].equals("IN"))
         {

            String date = format.format(conditionValue);
            return Arrays.asList(configuredInputList[1].split("/")).contains(date);
         }
      }
      catch (Exception e)
      {
         e.printStackTrace();
      }

      return false;
  }

   static final long serialVersionUID = 1L;

   private int flightNumber;
   private java.util.List<cnk.air_commercialscalculationengine.PassengerDetails> passengerDetails;

   public FlightDetails()
   {
   }

   public int getFlightNumber()
   {
      return this.flightNumber;
   }

   public void setFlightNumber(int flightNumber)
   {
      this.flightNumber = flightNumber;
   }

   public java.util.List<cnk.air_commercialscalculationengine.PassengerDetails> getPassengerDetails()
   {
      return this.passengerDetails;
   }

   public void setPassengerDetails(
         java.util.List<cnk.air_commercialscalculationengine.PassengerDetails> passengerDetails)
   {
      this.passengerDetails = passengerDetails;
   }

   public java.util.Date getFlightTiming()
   {
      return this.flightTiming;
   }

   public void setFlightTiming(java.util.Date flightTiming)
   {
      this.flightTiming = flightTiming;
   }

   public FlightDetails(
         java.util.Date flightTiming,
         int flightNumber,
         java.util.List<cnk.air_commercialscalculationengine.PassengerDetails> passengerDetails)
   {
      this.flightTiming = flightTiming;
      this.flightNumber = flightNumber;
      this.passengerDetails = passengerDetails;
   }

}
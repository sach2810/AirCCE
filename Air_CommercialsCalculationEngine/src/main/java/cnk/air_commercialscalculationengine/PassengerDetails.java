package cnk.air_commercialscalculationengine;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class PassengerDetails implements java.io.Serializable
{

	  public void NonNettOffCommercialCalculation (String CommercialName, String CommercialType,double PercentageValue, double AmountValue, String FareComponent, String Currency, String TaxComponent) {
		  if(CommercialType == "Receivable")
			  ReceivableNonNettOffCommercialCalculation(CommercialName, PercentageValue, AmountValue, FareComponent, Currency, TaxComponent);
		  else
			  PayableNonNettOffCommercialCalculation(CommercialName, PercentageValue, AmountValue, FareComponent, Currency, TaxComponent);
	  }
	  public void ReceivableNonNettOffCommercialCalculation (String CommercialName, double PercentageValue, double AmountValue, String FareComponent, String Currency, String TaxComponent) {
		  
		  CommercialDetails commDetails = new CommercialDetails();
		  FareBreakUp commDetailsFareBreakUp = null;
		  
		  if(this.getCommercialDetails()==null) {
			  this.setCommercialDetails(new ArrayList<CommercialDetails>());
		  }
		  
		  if(this.getFareBreakUp()!=null) {
			  commDetailsFareBreakUp = new FareBreakUp();
			  commDetailsFareBreakUp.setBaseFare(this.getFareBreakUp().getBaseFare());
		  }
		  commDetails.setCommercialInitialAmount(0);
		  double commAmount = 0;
		  if(PercentageValue>0) {
			  
			  commAmount=ReceivableFareBreakUpCalculation(commDetails,commDetailsFareBreakUp,FareComponent,TaxComponent,PercentageValue);
			  commDetails.setCommercialCalculationPercentage(PercentageValue);
		  }
		  if(AmountValue>0) {
			  
			  if(commDetails.getCommercialFareComponent()==null && FareComponent!=null)
				  commDetails.setCommercialFareComponent(FareComponent);
			  
			  if(commDetailsFareBreakUp!=null) {
				  
				  if(commDetails.getCommercialInitialAmount()==0) {
					  
					  commDetailsFareBreakUp.setBaseFare(commDetailsFareBreakUp.getBaseFare()-AmountValue);
					  CreateReceivableCommercialTaxBreakUp(this.getFareBreakUp().getTaxDetails(),commDetailsFareBreakUp,0);
					  commDetails.setCommercialInitialAmount(this.getFareBreakUp().getBaseFare());
				  }
				  
				  else {
					  
					  if(FareComponent=="Basic" || FareComponent=="Total")
						  commDetailsFareBreakUp.setBaseFare(commDetailsFareBreakUp.getBaseFare()-AmountValue);
					  
					  else {
						  
						  List<String> tempTaxList = Arrays.asList(TaxComponent.split(";"));
						  for(TaxDetails taxDetails : commDetailsFareBreakUp.getTaxDetails()) {
							  for(String tempTaxName : tempTaxList) {
								  if(tempTaxName.equals(taxDetails.getTaxName()))
									  taxDetails.setTaxValue(taxDetails.getTaxValue()-AmountValue);
								  //break;
							  }
						  }
					  }
				  }
					  
			  }
			  
			  else {
				
				  if(commDetails.getCommercialInitialAmount()==0)
					  commDetails.setCommercialInitialAmount(this.getTotalFare());
			  }
			  
			  commAmount = commAmount+AmountValue;
			  commDetails.setCommercialCurrency(Currency);
			  commDetails.setCommercialCalculationAmount(AmountValue);
		  }
		  
		  commDetails.setCommercialAmount(commAmount);
		  commDetails.setCommercialName(CommercialName);
		  commDetails.setCommercialTotalAmount(commDetails.getCommercialInitialAmount()-commAmount);
		  commDetails.setFareBreakUp(commDetailsFareBreakUp);
		  this.getCommercialDetails().add(commDetails);
		  
		  this.setTotalReceivables(this.getTotalReceivables() + commAmount);
	  }
	  
	  public double ReceivableFareBreakUpCalculation(CommercialDetails commDetails, FareBreakUp commDetailsFareBreakUp, String fareName, String taxName, double percentageValue) {
		  
		  if(taxName == null) {
			  
			  commDetails.setCommercialFareComponent(fareName);
			  if(fareName=="Total") {
				  
				  if(this.getFareBreakUp() != null) {
					  
					  commDetailsFareBreakUp.setBaseFare(commDetailsFareBreakUp.getBaseFare()-(commDetailsFareBreakUp.getBaseFare()*(percentageValue/100)));
					  CreateReceivableCommercialTaxBreakUp(this.getFareBreakUp().getTaxDetails(),commDetailsFareBreakUp,percentageValue);
					  
				  }
				  commDetails.setCommercialInitialAmount(this.getTotalFare());
				  return this.getTotalFare()*(percentageValue/100);
				  
			  }
			  else if (fareName=="Basic") {
				  
				  if(this.getFareBreakUp().getTaxDetails() != null) {
					  
					  commDetailsFareBreakUp.setBaseFare(commDetailsFareBreakUp.getBaseFare()-(commDetailsFareBreakUp.getBaseFare()*(percentageValue/100)));
					  CreateReceivableCommercialTaxBreakUp(this.getFareBreakUp().getTaxDetails(),commDetailsFareBreakUp,0);
				  }
				  commDetails.setCommercialInitialAmount(this.getFareBreakUp().getBaseFare());
				  return this.getFareBreakUp().getBaseFare()*(percentageValue/100);
			  }
		  }
		  
		  else {
			  
			  double commercialAmount = 0;
			  
			  if(fareName == "Basic") {
				  
				  commDetailsFareBreakUp.setBaseFare(commDetailsFareBreakUp.getBaseFare()-(commDetailsFareBreakUp.getBaseFare()*percentageValue/100));
				  commercialAmount = this.getFareBreakUp().getBaseFare();
				  commDetails.setCommercialFareComponent(fareName);
			  }
			  
			  if(this.getFareBreakUp().getTaxDetails()!=null) {
				  
				  List<String> tempTaxDetails = Arrays.asList(taxName.split(";"));
				  commDetailsFareBreakUp.setTaxDetails(new ArrayList<TaxDetails>());
				  
				  for(TaxDetails taxes : this.getFareBreakUp().getTaxDetails()) {

					  TaxDetails commercialTax = new TaxDetails();
					  commercialTax.setTaxName(taxes.getTaxName());
					  commercialTax.setTaxValue(taxes.getTaxValue());
					  
					  for(String tempTaxName : tempTaxDetails) {

						  if(tempTaxName.equals(taxes.getTaxName())) {
							
							  commercialAmount=commercialAmount+taxes.getTaxValue();
							  commercialTax.setTaxValue(taxes.getTaxValue()-(taxes.getTaxValue()*percentageValue/100));
							  
							  if(commDetails.getCommercialFareComponent()==null)
								  commDetails.setCommercialFareComponent(tempTaxName);
							  else
								  commDetails.setCommercialFareComponent(commDetails.getCommercialFareComponent()+","+tempTaxName);
						  }
						  //break;
					  }
					  commDetailsFareBreakUp.getTaxDetails().add(commercialTax);
				  }
			  }
			  
			  commDetails.setCommercialInitialAmount(commercialAmount);
			  return commercialAmount*(percentageValue/100);
		  }
		  
		  return 0;
	  }
	  
	  public void CreateReceivableCommercialTaxBreakUp(List<TaxDetails> taxDetails, FareBreakUp commDetailsFareBreakUp, double taxPercentageValue) {
		  
		  commDetailsFareBreakUp.setTaxDetails(new ArrayList<TaxDetails>());
		  for(TaxDetails taxes : taxDetails) {
			  
			  TaxDetails commercialTax = new TaxDetails();
			  if(taxPercentageValue==0) {
				  
				  commercialTax.setTaxValue(taxes.getTaxValue());
				  commercialTax.setTaxName(taxes.getTaxName());
			  }
			  else {
				  
				  commercialTax.setTaxValue(taxes.getTaxValue()-(taxes.getTaxValue()*(taxPercentageValue/100)));
				  commercialTax.setTaxName(taxes.getTaxName());
			  }
			  
			  commDetailsFareBreakUp.getTaxDetails().add(commercialTax);
				  
		  }
	  }
	  
	  public void PayableNonNettOffCommercialCalculation (String CommercialName, double PercentageValue, double AmountValue, String FareComponent, String Currency, String TaxComponent) {
		  
		  CommercialDetails commDetails = new CommercialDetails();
		  FareBreakUp commDetailsFareBreakUp = null;
		  
		  if(this.getCommercialDetails()==null) {
			  this.setCommercialDetails(new ArrayList<CommercialDetails>());
		  }
		  
		  if(this.getFareBreakUp()!=null) {
			  commDetailsFareBreakUp = new FareBreakUp();
			  commDetailsFareBreakUp.setBaseFare(this.getFareBreakUp().getBaseFare());
		  }
		  commDetails.setCommercialInitialAmount(0);
		  double commAmount = 0;
		  if(PercentageValue>0) {
			  
			  commAmount=PayableFareBreakUpCalculation(commDetails,commDetailsFareBreakUp,FareComponent,TaxComponent,PercentageValue);
			  commDetails.setCommercialCalculationPercentage(PercentageValue);
		  }
		  if(AmountValue>0) {

			  if(commDetails.getCommercialFareComponent()==null && FareComponent!=null)
				  commDetails.setCommercialFareComponent(FareComponent);
			  
			  if(commDetailsFareBreakUp!=null) {
				  
				  if(commDetails.getCommercialInitialAmount()==0) {
					  
					  commDetailsFareBreakUp.setBaseFare(commDetailsFareBreakUp.getBaseFare()+AmountValue);
					  CreatePayableCommercialTaxBreakUp(this.getFareBreakUp().getTaxDetails(),commDetailsFareBreakUp,0);
					  commDetails.setCommercialInitialAmount(this.getFareBreakUp().getBaseFare());
				  }
				  
				  else {
					  
					  if(FareComponent=="Basic" || FareComponent=="Total")
						  commDetailsFareBreakUp.setBaseFare(commDetailsFareBreakUp.getBaseFare()+AmountValue);
					  
					  else {
						  
						  List<String> tempTaxList = Arrays.asList(TaxComponent.split(";"));
						  for(TaxDetails taxDetails : commDetailsFareBreakUp.getTaxDetails()) {
							  for(String tempTaxName : tempTaxList) {
								  if(tempTaxName.equals(taxDetails.getTaxName()))
									  taxDetails.setTaxValue(taxDetails.getTaxValue()+AmountValue);
								  //break;
							  }
						  }
					  }
				  }
					  
			  }
			  
			  else {
				
				  if(commDetails.getCommercialInitialAmount()==0)
					  commDetails.setCommercialInitialAmount(this.getTotalFare());
			  }
			  
			  commAmount = commAmount+AmountValue;
			  commDetails.setCommercialCurrency(Currency);
			  commDetails.setCommercialCalculationAmount(AmountValue);
		  }
		  
		  commDetails.setCommercialAmount(commAmount);
		  commDetails.setCommercialName(CommercialName);
		  commDetails.setCommercialTotalAmount(commDetails.getCommercialInitialAmount()+commAmount);
		  commDetails.setFareBreakUp(commDetailsFareBreakUp);
		  this.getCommercialDetails().add(commDetails);
		  
		  this.setTotalPayables(this.getTotalPayables() + commAmount);
	  }
	  
	  public double PayableFareBreakUpCalculation(CommercialDetails commDetails, FareBreakUp commDetailsFareBreakUp, String fareName, String taxName, double percentageValue) {
		  
		  if(taxName == null) {
			  
			  commDetails.setCommercialFareComponent(fareName);
			  if(fareName=="Total") {
				  
				  if(this.getFareBreakUp() != null) {
					  
					  commDetailsFareBreakUp.setBaseFare(commDetailsFareBreakUp.getBaseFare()+(commDetailsFareBreakUp.getBaseFare()*(percentageValue/100)));
					  CreatePayableCommercialTaxBreakUp(this.getFareBreakUp().getTaxDetails(),commDetailsFareBreakUp,percentageValue);
					  
				  }
				  commDetails.setCommercialInitialAmount(this.getTotalFare());
				  return this.getTotalFare()*(percentageValue/100);
				  
			  }
			  else if (fareName=="Basic") {
				  
				  if(this.getFareBreakUp().getTaxDetails() != null) {
					  
					  commDetailsFareBreakUp.setBaseFare(commDetailsFareBreakUp.getBaseFare()+(commDetailsFareBreakUp.getBaseFare()*(percentageValue/100)));
					  CreatePayableCommercialTaxBreakUp(this.getFareBreakUp().getTaxDetails(),commDetailsFareBreakUp,0);
				  }
				  commDetails.setCommercialInitialAmount(this.getFareBreakUp().getBaseFare());
				  return this.getFareBreakUp().getBaseFare()*(percentageValue/100);
			  }
		  }
		  
		  else {
			  
			  double commercialAmount = 0;
			  
			  if(fareName == "Basic") {
				  
				  commDetailsFareBreakUp.setBaseFare(commDetailsFareBreakUp.getBaseFare()+(commDetailsFareBreakUp.getBaseFare()*percentageValue/100));
				  commercialAmount = this.getFareBreakUp().getBaseFare();
				  commDetails.setCommercialFareComponent(fareName);
			  }
			  
			  if(this.getFareBreakUp().getTaxDetails()!=null) {
				  
				  List<String> tempTaxDetails = Arrays.asList(taxName.split(";"));
				  commDetailsFareBreakUp.setTaxDetails(new ArrayList<TaxDetails>());
				  
				  for(TaxDetails taxes : this.getFareBreakUp().getTaxDetails()) {

					  TaxDetails commercialTax = new TaxDetails();
					  commercialTax.setTaxName(taxes.getTaxName());
					  commercialTax.setTaxValue(taxes.getTaxValue());
					  
					  for(String tempTaxName : tempTaxDetails) {

						  if(tempTaxName.equals(taxes.getTaxName())) {
							
							  commercialAmount=commercialAmount+taxes.getTaxValue();
							  commercialTax.setTaxValue(taxes.getTaxValue()+(taxes.getTaxValue()*percentageValue/100));
							  
							  if(commDetails.getCommercialFareComponent()==null)
								  commDetails.setCommercialFareComponent(tempTaxName);
							  else
								  commDetails.setCommercialFareComponent(commDetails.getCommercialFareComponent()+","+tempTaxName);
						  }
						  //break;
					  }
					  commDetailsFareBreakUp.getTaxDetails().add(commercialTax);
				  }
			  }
			  
			  commDetails.setCommercialInitialAmount(commercialAmount);
			  return commercialAmount*(percentageValue/100);
		  }
		  
		  return 0;
	  }
	  
	  public void CreatePayableCommercialTaxBreakUp(List<TaxDetails> taxDetails, FareBreakUp commDetailsFareBreakUp, double taxPercentageValue) {
		  
		  commDetailsFareBreakUp.setTaxDetails(new ArrayList<TaxDetails>());
		  for(TaxDetails taxes : taxDetails) {
			  
			  TaxDetails commercialTax = new TaxDetails();
			  if(taxPercentageValue==0) {
				  
				  commercialTax.setTaxValue(taxes.getTaxValue());
				  commercialTax.setTaxName(taxes.getTaxName());
			  }
			  else {
				  
				  commercialTax.setTaxValue(taxes.getTaxValue()+(taxes.getTaxValue()*(taxPercentageValue/100)));
				  commercialTax.setTaxName(taxes.getTaxName());
			  }
			  
			  commDetailsFareBreakUp.getTaxDetails().add(commercialTax);
				  
		  }
	  }	  
	  
	  
	  public void AllCommercialCalculation(String nettOffCommercialHeadName, String CommercialName, String CommercialType,double PercentageValue, double AmountValue, String FareComponent, String Currency, String TaxComponent) {
		  
		  if (nettOffCommercialHeadName == null)
			  NonNettOffCommercialCalculation (CommercialName, CommercialType,PercentageValue, AmountValue, FareComponent, Currency, TaxComponent);
			  
		  else {
			  CommercialDetails netOffCommDetails = null;
			  for (CommercialDetails itrCommDet : this.getCommercialDetails()) {
				  if (itrCommDet.getCommercialName().equals(nettOffCommercialHeadName)) {
					  
					  netOffCommDetails = itrCommDet;
					  break;
				  }
			  }
			  NettOffCommercialCalculation (netOffCommDetails, CommercialName, PercentageValue, AmountValue, FareComponent, Currency, TaxComponent); 
			  
		  }
		  
	  }
	  
	  public void NettOffCommercialCalculation(CommercialDetails nettOffCommDetails, String CommercialName, double PercentageValue, double AmountValue, String FareComponent, String Currency, String TaxComponent) {
		  
		  CommercialDetails commDetails = new CommercialDetails();
		  FareBreakUp commDetailsFareBreakUp = null;
		  
		  if(nettOffCommDetails.getFareBreakUp()!=null) {
			  commDetailsFareBreakUp = new FareBreakUp();
			  commDetailsFareBreakUp.setBaseFare(nettOffCommDetails.getFareBreakUp().getBaseFare());
		  }
		  commDetails.setCommercialInitialAmount(0);
		  double commAmount = 0;
		  if(PercentageValue>0) {
			  
			  commAmount=NettOffFareBreakUpCalculation(nettOffCommDetails,commDetails,commDetailsFareBreakUp,FareComponent,TaxComponent,PercentageValue);
			  commDetails.setCommercialCalculationPercentage(PercentageValue);
		  }
		  if(AmountValue>0) {
			  
			  if(commDetails.getCommercialFareComponent()==null && FareComponent!=null)
				  commDetails.setCommercialFareComponent(FareComponent);
			  
			  if(commDetailsFareBreakUp!=null) {
				  
				  if(commDetails.getCommercialInitialAmount()==0) {
					  
					  commDetailsFareBreakUp.setBaseFare(commDetailsFareBreakUp.getBaseFare()-AmountValue);
					  CreateReceivableCommercialTaxBreakUp(nettOffCommDetails.getFareBreakUp().getTaxDetails(),commDetailsFareBreakUp,0);
					  commDetails.setCommercialInitialAmount(nettOffCommDetails.getFareBreakUp().getBaseFare());
				  }
				  
				  else {
					  
					  if(FareComponent=="Basic" || FareComponent=="Total")
						  commDetailsFareBreakUp.setBaseFare(commDetailsFareBreakUp.getBaseFare()-AmountValue);
					  
					  else {

						  List<String> tempTaxList = Arrays.asList(TaxComponent.split(";"));
						  for(TaxDetails taxDetails : commDetailsFareBreakUp.getTaxDetails()) {
							  for(String tempTaxName : tempTaxList) {
								  if(tempTaxName.equals(taxDetails.getTaxName()))
									  taxDetails.setTaxValue(taxDetails.getTaxValue()-AmountValue);
								  //break;
							  }
						  }
					  }
				  }
					  
			  }
			  
			  else {
				
				  if(commDetails.getCommercialInitialAmount()==0)
					  commDetails.setCommercialInitialAmount(nettOffCommDetails.getCommercialTotalAmount());
			  }
			  
			  commAmount = commAmount+AmountValue;
			  commDetails.setCommercialCurrency(Currency);
			  commDetails.setCommercialCalculationAmount(AmountValue);
		  }
		  
		  commDetails.setCommercialAmount(commAmount);
		  commDetails.setCommercialName(CommercialName);
		  commDetails.setCommercialTotalAmount(commDetails.getCommercialInitialAmount()-commAmount);
		  commDetails.setFareBreakUp(commDetailsFareBreakUp);
		  this.getCommercialDetails().add(commDetails);
		  
		  this.setTotalReceivables(this.getTotalReceivables() + commAmount);
		  
	  }
	  
	  public double NettOffFareBreakUpCalculation(CommercialDetails nettOffCommDetails, CommercialDetails commDetails, FareBreakUp commDetailsFareBreakUp, String fareName, String taxName, double percentageValue) {
		  
		  if(taxName == null) {
			  
			  commDetails.setCommercialFareComponent(fareName);
			  if(fareName=="Total") {
				  
				  if(nettOffCommDetails.getFareBreakUp() != null) {
					  
					  commDetailsFareBreakUp.setBaseFare(commDetailsFareBreakUp.getBaseFare()-(commDetailsFareBreakUp.getBaseFare()*(percentageValue/100)));
					  CreateReceivableCommercialTaxBreakUp(nettOffCommDetails.getFareBreakUp().getTaxDetails(),commDetailsFareBreakUp,percentageValue);
					  
				  }
				  commDetails.setCommercialInitialAmount(nettOffCommDetails.getCommercialTotalAmount());
				  return nettOffCommDetails.getCommercialTotalAmount()*(percentageValue/100);
				  
			  }
			  else if (fareName=="Basic") {
				  
				  if(nettOffCommDetails.getFareBreakUp().getTaxDetails() != null) {
					  
					  commDetailsFareBreakUp.setBaseFare(commDetailsFareBreakUp.getBaseFare()-(commDetailsFareBreakUp.getBaseFare()*(percentageValue/100)));
					  CreateReceivableCommercialTaxBreakUp(nettOffCommDetails.getFareBreakUp().getTaxDetails(),commDetailsFareBreakUp,0);
				  }
				  commDetails.setCommercialInitialAmount(nettOffCommDetails.getFareBreakUp().getBaseFare());
				  return commDetails.getFareBreakUp().getBaseFare()*(percentageValue/100);
			  }
		  }
		  
		  else {
			  
			  double commercialAmount = 0;
			  
			  if(fareName == "Basic") {
				  
				  commDetailsFareBreakUp.setBaseFare(commDetailsFareBreakUp.getBaseFare()-(commDetailsFareBreakUp.getBaseFare()*percentageValue/100));
				  commercialAmount = nettOffCommDetails.getFareBreakUp().getBaseFare();
				  commDetails.setCommercialFareComponent(fareName);
			  }
			  
			  if(nettOffCommDetails.getFareBreakUp().getTaxDetails()!=null) {
				  
				  List<String> tempTaxDetails = Arrays.asList(taxName.split(";"));
				  commDetailsFareBreakUp.setTaxDetails(new ArrayList<TaxDetails>());
				  
				  for(TaxDetails taxes : nettOffCommDetails.getFareBreakUp().getTaxDetails()) {

					  TaxDetails commercialTax = new TaxDetails();
					  commercialTax.setTaxName(taxes.getTaxName());
					  commercialTax.setTaxValue(taxes.getTaxValue());
					  
					  for(String tempTaxName : tempTaxDetails) {

						  if(tempTaxName.equals(taxes.getTaxName())) {
							
							  commercialAmount=commercialAmount+taxes.getTaxValue();
							  commercialTax.setTaxValue(taxes.getTaxValue()-(taxes.getTaxValue()*percentageValue/100));
							  
							  if(commDetails.getCommercialFareComponent()==null)
								  commDetails.setCommercialFareComponent(tempTaxName);
							  else
								  commDetails.setCommercialFareComponent(commDetails.getCommercialFareComponent()+","+tempTaxName);
						  }
						  //break;
					  }
					  commDetailsFareBreakUp.getTaxDetails().add(commercialTax);
				  }
			  }
			  
			  commDetails.setCommercialInitialAmount(commercialAmount);
			  return commercialAmount*(percentageValue/100);
		  }
		  
		  return 0;
	  }	  

   static final long serialVersionUID = 1L;

   private java.lang.String passengerType;
   private java.util.List<java.lang.String> commercialsApplied;
   private double totalFare;
   private double totalReceivables;
   private double totalPayables;

   private FareBreakUp fareBreakUp;

   private java.util.List<cnk.air_commercialscalculationengine.CommercialDetails> commercialDetails;

   public PassengerDetails()
   {
   }

   public java.lang.String getPassengerType()
   {
      return this.passengerType;
   }

   public void setPassengerType(java.lang.String passengerType)
   {
      this.passengerType = passengerType;
   }

   public java.util.List<java.lang.String> getCommercialsApplied()
   {
      return this.commercialsApplied;
   }

   public void setCommercialsApplied(
         java.util.List<java.lang.String> commercialsApplied)
   {
      this.commercialsApplied = commercialsApplied;
   }

   public double getTotalFare()
   {
      return this.totalFare;
   }

   public void setTotalFare(double totalFare)
   {
      this.totalFare = totalFare;
   }

   public double getTotalReceivables()
   {
      return this.totalReceivables;
   }

   public void setTotalReceivables(double totalReceivables)
   {
      this.totalReceivables = totalReceivables;
   }

   public double getTotalPayables()
   {
      return this.totalPayables;
   }

   public void setTotalPayables(double totalPayables)
   {
      this.totalPayables = totalPayables;
   }

   public java.util.List<cnk.air_commercialscalculationengine.CommercialDetails> getCommercialDetails()
   {
      return this.commercialDetails;
   }

   public void setCommercialDetails(
         java.util.List<cnk.air_commercialscalculationengine.CommercialDetails> commercialDetails)
   {
      this.commercialDetails = commercialDetails;
   }

   public cnk.air_commercialscalculationengine.FareBreakUp getFareBreakUp()
   {
      return this.fareBreakUp;
   }

   public void setFareBreakUp(
         cnk.air_commercialscalculationengine.FareBreakUp fareBreakUp)
   {
      this.fareBreakUp = fareBreakUp;
   }

   public PassengerDetails(
         java.lang.String passengerType,
         java.util.List<java.lang.String> commercialsApplied,
         double totalFare,
         double totalReceivables,
         double totalPayables,
         cnk.air_commercialscalculationengine.FareBreakUp fareBreakUp,
         java.util.List<cnk.air_commercialscalculationengine.CommercialDetails> commercialDetails)
   {
      this.passengerType = passengerType;
      this.commercialsApplied = commercialsApplied;
      this.totalFare = totalFare;
      this.totalReceivables = totalReceivables;
      this.totalPayables = totalPayables;
      this.fareBreakUp = fareBreakUp;
      this.commercialDetails = commercialDetails;
   }

}